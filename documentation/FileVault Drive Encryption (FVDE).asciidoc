= FileVault Drive Encryption (FVDE)
Analysis of FVDE

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary

The FileVault Drive Encryption (FVDE) format is used by Apple Mac OS to encrypt
volumes. This specification is based on available documentation and was enhanced
by analyzing test data.

This document is intended as a working document of the data format specification
for the libfvde project.

[preface]
== Document information

[cols="1,5"]
|===
| Author(s): | Omar Choudary <choudary.omar@gmail.com> +
Joachim Metz <joachim.metz@gmail.com>
| Abstract: | This document contains information about the Mac OS FileVault Drive Encryption (FVDE) format
| Classification: | Public
| Keywords: | FileVault 2, FileVault Drive Encryption, FVDE, Core Storage, CoreStorage
|===

[preface]
== License

....
Copyright (C) 2011-2022, Omar Choudary <choudary.omar@gmail.com>,
                         Joachim Metz <joachim.metz@gmail.com>.
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the section entitled "GNU Free Documentation License".
....

[preface]
== Revision history

[cols="1,1,1,5",options="header"]
|===
| Version | Author(s) | Date | Comments
| 0.0.1 | O. Choudary | September 2011 | Initial version.
| 0.0.2 | J.B. Metz | May 2012 | Format changes and additional information. +
Added secondary encrypted metadata block.
| 0.0.3 | J.B. Metz | July 2012 | Additional information regarding Core Storage format.
| 0.0.4 | O. Choudary | November 2012 | Textual updates.
| 0.0.5 | J.B. Metz | December 2012 | Updates for Mac OS X 10.8 (Mountain Lion)
| 0.0.6 | J.B. Metz | February 2013 | Additional findings with thanks to O. De Lampugnani, Y. Khatri and D. Parker.
| 0.0.7 | J.B. Metz | March 2013 | Additional information regarding Core Storage.
| 0.0.8 | J.B. Metz | February 2015 | Switched to asccidoc format. +
Additional information about partially compressed volumes.
| 0.0.9 | J.B. Metz | October 2015 | Additional information about DEFLATE compressed XML plist, with thanks to A. Rubtsov.
| 0.0.10 | J.B. Metz | October 2015 | Additional information about metadata.
| 0.0.11 | J.B. Metz | June 2016 | Additional information about volume group XML plist.
| 0.0.12 | J.B. Metz | July 2016 | Additional information about metadata.
| 0.0.13 | J.B. Metz | May 2017 | Additional information about metadata.
| 0.0.14 | J.B. Metz | October 2017 | Additional information about metadata.
| 0.0.15 | J.B. Metz | September 2018 | Textual updates.
| 0.0.16 | J.B. Metz | December 2020 | Format changes.
| 0.0.17 | J.B. Metz | January 2022 | Additional information about Core Storage format.
|===

:numbered:
== Overview

FileVault Drive Encryption (FVDE) is the volume encryption used by Apple
Mac OS as of Lion (10.7).

This document was initially written for FVDE, but the structures mentioned are
also used by the Core Storage (CS) volume management system. CS supports both
non-encrypted and encrypted volumes.

CS distinguishes between different types of encrypt volumes:

* EncryptedRoot.plist.wipekey protected volume; this volume can be accessed via multiple user passwords or a recovery password. The disk that contains the volume should also have a partition name "Recovery HD" that contains the EncryptedRoot.plist.wipekey file. This is also referred to as FVDE.
* Pass-phrase protected volume, this volume can be accessed via a known pass-phrase and uses XML plist-like data identified as "com.apple.corestorage.lvf.encryption.context".

Both EncryptedRoot.plist.wipekey and
"com.apple.corestorage.lvf.encryption.context" are definined as the the
encryption context plist in this document.

[cols="1,5",options="header"]
|===
| Characteristics | Description
| Byte order | Little-endian +
Except for UUID/GUID values, which are stored in big-endian
| Date and time values |
| Character strings | Unicode stored as UTF-8
|===

=== Test version

The following version of programs were used to test the information within this
document:

* Mac OS X Lion (10.7)
* Mac OS X Mountain Lion (10.8)
* Mac OS X Mavericks (10.9)
* Mac OS X Yosemite (10.10)
* Mac OS X El Capitan (10.11)
* macOS Sierra (10.12)
* macOS High Sierra (10.13)
* macOS Mojave (10.14)
* macOS Catalina (10.15)

== Keys

To encrypt storage media Core Storage uses different kind of keys.

=== Volume master key

The Volume Master Key (VMK) is used to encrypt the data on the volume.

The VMK is 128-bit of size and is stored in multiple KEKWrappedVolumeKeyStruct
structures in the encryption context plist.

=== Volume tweak key

The volume tweak is the second key required by AES-XTS to decrypt the data on
the volume. The volume tweak is 128-bit of size and is determined as follows:

First the 128-bit volume master key is concatenated with the 128-bit logical
volume family identifier (UUID) (com.apple.corestorage.lv.familyUUID) as the
tweak key data.

Then the one-way function SHA256 is applied to the tweak key data, so that only
the first 128 bits is retained as the volume tweak key:

....
volume tweak key = SHA256( tweak key data )
....

=== EncryptedRoot.plist.wipekey master key

The physical volume identifier (128-bit UUID) of the encrypted volume is used
to decrypt the EncryptedRoot.plist.wipekey file. This identifier can be found
in the CS (physical) volume header.

=== Recovery key

FileVault provides for a recovery password to unlock the encrypted data. The
recovery password is used to determine a recovery key.

Example recovery password:

....
35AJ-AC98-TI1H-N4M3-HDUQ-UQFG
....

This recovery password is used as a string, including the dashes between the
digits. The corresponding recovery key is calculated using the PBKDF2 algorithm
with:

* Apply the PBKDF2 algorithm using:
** number of iterations
** SHA256 as the pseudo-random function (PRF)
** a salt, as stored in the corresponding PassphraseWrappedKEKStruct in the EncryptedRoot.plist.wipekey file
** the recovery password

The PassphraseWrappedKEKStruct contains the primary key to unlock the
KEKWrappedVolumeKeyStruct containing the volume master key.

1. The recovery key is used to retrieve a Key Encrypting Key (KEK) by decrypting a blob in the PassphraseWrappedKEKStruct.
2. This KEK is then used to recover the Volume Master Key (VMK) from the KEKWrappedVolumeKeyStruct.

The number of iterations is stored in the PassphraseWrappedKEKStruct but seems
to be consistently 41000 for EncryptedRoot.plist.wipekey protected volumes on
Mac OS X Lion (10.7).

=== User key

For every user on an Mac OS system with FVDE, FileVault provides for a user
password to unlock the encrypted data. The user password is used to determine a
user key.

[yellow-background]*For now it is assumed that the user password contains ASCII characters only.*
[yellow-background]*TODO determine if other characters are allowed and how they are encoded during the password derivation.*

The corresponding user key is calculated and used in the same manner as the
recovery key to obtain the volume master key. However each user has its own
associated PassphraseWrappedKEKStruct.

== Encryption methods

FileVault Disk Encryption uses the AES-XTS encryption method to encrypt both
the volume metadata and sector data. FileVault uses different methods to
encrypt a multi-user system volume and single-user removable media volume.

=== AES-XTS

The AES-XTS encryption method uses:

* a primary key (key 1) to encrypt/decrypt the data (the whitened
plaintext/ciphertext).
* a secondary key (key 2) to encrypt/ decrypt the tweak value, also referred to
as the tweak key. The encrypted tweak value is used to whiten the
plaintext/ciphertext.
* a tweak value

The cipher block size is 128 bytes.

See `[IEEE 1619-2007]` for more information.

The EncryptedRoot.plist.wipekey is encrypted using the "volume key data" of the
FileVault encrypted volume as primary key, and a sequence of 0-byte values as
both the tweak key and the tweak value. The unit size is the entire file.

The volume metadata is encrypted using the volume "key data" as primary key,
the "physical volume identifier" of the volume as tweak key and a sequence of
0-byte values as the tweak value. The unit size is 8192 bytes. Both the "volume
key data" and "physical volume identifier" can be found in the (physical) volume
header of the corresponding volume.

The volume sector data is encrypted using the "volume master key" as primary
key, the "volume tweak key" as tweak key and the sector number as tweak value.
The tweak value is the corresponding sector number represented as a 128-bit
little-endian value. The unit size is the sector size, commonly 512 bytes.

=== Encrypted system volume

In an encrypted system volume the EncryptedRoot.plist.wipekey contains the
volume master key. A pass-phrase or recovery password is used to unlock an
intermediate key which provides access to the volume master key.

=== Encrypted removable media volume

FileVault2 support multiple ways to encrypt a removable media volume, several
of the know methods are:

* with an encryption context
* without an encryption context
* decrypted

==== With an encryption context

In an encrypted removable media volume with an encryption context the XML
plist-like data identified as "com.apple.corestorage.lvf.encryption.context"
stored in the encrypted metadata contains the volume master key. A pass-phrase
is used to unlock an intermediate key which provides access to the volume
master key.

==== Without an encryption context

[yellow-background]*TODO*

==== Notes

diskutil cs decryptVolume will decrypt the volume but the data on-disk is still
encrypted with the [yellow-background]*TODO*.

0-byte filled blocks in the physical volume are encrypted in the logical volume.

== Physical volume header

The physical volume header is 512 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Checksum +
Contains a CRC-32 of bytes 8 to 512
| 4 | 4 | 0xffffffff | Initial value of the CRC-32
| 8 | 2 | 1 | Version
| 10 | 2 | 0x0010 | Block type
| 12 | 4 | | [yellow-background]*(Block) serial number*
| 16 | 8 | [yellow-background]*0x00000001* | [yellow-background]*Unknown*
| 24 | 8 | | [yellow-background]*Unknown (Empty values)*
| 32 | 8 | | [yellow-background]*Unknown (Empty values)*
| 40 | 8 | | [yellow-background]*Unknown (Empty values)*
| 48 | 4 | | Bytes per sector +
[yellow-background]*(header block size?)*
| 52 | 4 | | [yellow-background]*Unknown (Empty values)*
| 56 | 8 | | [yellow-background]*Unknown (Empty values)*
| 64 | 8 | | Physical volume size (in bytes)
| 72 | 16 | | [yellow-background]*Unknown* +
[yellow-background]*(Assumed to be resize flags? Could this be the resize volume size and/or resize stack size)*
| 88 | 2 | "CS" | Core Storage signature
| 90 | 4 | | Checksum algorithm +
See section: <<checksum_algorithms,Checksum algorithms>>
| 94 | 2 | 4 | [yellow-background]*Number of metadata blocks?* +
[yellow-background]*Maximum of 8?*
| 96 | 4 | | Block size (in bytes)
| 100 | 4 | | Metadata size (in bytes)
| 104 | 8 x 4 | | Array of metadata block numbers +
The block numbers are relative from the start of the physical volume
| 136 | 4 x 8 = 32 | | [yellow-background]*Reserved for medadata block numbers?*
| 168 | 4 | 16 | Key data size
| 172 | 4 | 2 | Encryption method +
2 => AES-XTS
| 176 | 16 | | Key data
| 192 | 112 | | [yellow-background]*Unknown (empty values)* +
[yellow-background]*Reserved for key data?*
| 304 | 16 | | Physical volume identifier +
Contains an UUID in big-endian +
Used as the AES-XTS tweak key
| 320 | 16 | | Logical volume group identifier (com.apple.corestorage.lv.groupUUID) +
Contains an UUID in big-endian
| 336 | 176 | | [yellow-background]*Unknown (empty values)* +
[yellow-background]*Unused*
|===

A copy of the physical volume header is stored at the end of the volume, this
copy is checked when the physical volume header at the start of the volume is
corrupt.

=== [[checksum_algorithms]]Checksum algorithms

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 1 | CRC-32C | CRC-32 using the Castagnoli polynomial of 0x1edc6f41, also known as CRC-32C. +
The CRC-32 calculation does not use the XOR with 0xffffffff before and after the calculation, which is also referred to as weak CRC-32 calculation.
|===

== Metadata (section)

The metadata (section) (also referred to CS as disk label) consists of:

* a metadata block type 0x0011
** a metadata block header
** metadata block data
* optional metadata blocks
** [yellow-background]*reported block types 0x0014, 0x0024*
* volume groups descriptor

[yellow-background]*TODO, value index and plist ?*

The size of the metadata block is defined in the physical volume header, which commonly is 4 MiB.

=== Metadata block header

The metadata block header is 64 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Checksum +
Contains a CRC-32 of bytes 8 to 8192 +
[yellow-background]*Or does this depend on the block size?*
| 4 | 4 | 0xffffffff | Initial value of the CRC-32
| 8 | 2 | 1 | Version
| 10 | 2 | | Block type
| 12 | 4 | | [yellow-background]*Unknown (serial number)*
| 16 | 8 | | Transaction identifier (or sequence number)
| 24 | 8 | | Object identifier
| 32 | 8 | | Block number +
The block number relative from the start of the metadata or encrypted metadata
| 40 | 8 | | [yellow-background]*Unknown (copy of object identifier?)*
| 48 | 4 | | Block size (in bytes)
| 52 | 4 | | [yellow-background]*Unknown (flags ?)* +
[yellow-background]*0x00000000* +
[yellow-background]*0x00000002* +
[yellow-background]*0x00000004* +
[yellow-background]*(0x00000006 used by LVFwiped block)*
| 56 | 8 | | [yellow-background]*Unknown (empty values)*
|===

[yellow-background]*The (block) serial number does not always match the value in the physical volume header.*

==== Transactions and object identifiers

Metadata is updated in transcations. A transaction can be broken up in
multiple fragments where:

* primary transaction fragment starts with a metadata block data type 0x0013
* secondary transaction fragment starts with a metadata block data type 0x0014

Both metadata block data type 0x0013 and 0x0014 define transaction specific
object identifiers.

[yellow-background]*If not present in the transaction do object identifiers reference previous transactions?*

=== [[metadata_block_type_0x0011]]Metadata block data type 0x0011

Metadata block data type 0x0011 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Metadata size (in bytes) +
Including the metadata block header
| 4 | 4 | 0x00000003 | [yellow-background]*Unknown*
| 8 | 4 | | Checksum +
[yellow-background]*Contains a CRC-32 of bytes ?*
| 12 | 4 | 0xffffffff | Initial value of the CRC-32
| 16 | 4 | 0xc07e5707 | [yellow-background]*Unknown*
| 20 | 4 | | [yellow-background]*(Block) serial number*
| 24 | 4 | | [yellow-background]*(Block) serial number* +
[yellow-background]*Secondary (Block) serial number?*
| 28 | 4 | 0x00012710 | [yellow-background]*Unknown*
| 32 | 40 | | [yellow-background]*Unknown (Empty values)*
| 72 | 4 | | [yellow-background]*(Block) serial number or an empty value if not set*
| 76 | 4 | | [yellow-background]*(Block) serial number or an empty value if not set* +
[yellow-background]*Secondary (Block) serial number?*
| 80 | 24 | | [yellow-background]*Unknown (Empty values)*
| 104 | 4 | 0x0000000c | [yellow-background]*Unknown*
| 108 | 4 | 0x0000000d | [yellow-background]*Unknown*
| 112 | 4 | 0x00000040 | [yellow-background]*Unknown*
| 116 | 4 | 0x00010030 | [yellow-background]*Unknown*
| 120 | 4 | 0x00000001 | [yellow-background]*Unknown*
| 124 | 4 | 0x00010001 | [yellow-background]*Unknown*
| 128 | 4 | 0x00000500 +
0x00000800 | [yellow-background]*Unknown*
| 132 | 24 | | [yellow-background]*Unknown (Empty values)*
| 156 | 4 | | Volume groups descriptor offset
| 160 | 4 | | Volume group XML plist data offset +
Typically stored in the next block containing the volume group descriptor
| 164 | 4 | | Volume group XML plist data size
| 168 | 4 | | [yellow-background]*Unknown (Copy of volume group XML plist data size?)* +
[yellow-background]*Could this be used for compression similar as for metadata block type 0x0019?*
| 172 | 2 | | [yellow-background]*Unknown (empty values)*
| 174 | 2 | | [yellow-background]*Unknown (physical holume index, where 0 is the first physical volume)*
| 176 | 8 | | Volume group number of blocks +
[yellow-background]*Or physical volume number of blocks?* +
[yellow-background]*Or block number of backup physical volume header?*
| 184 | 8 | | [yellow-background]*Number of unknown values*
| 192 | 24 x number of unknown values | | [yellow-background]*Array of unknown values*
| ... | 8 | | [yellow-background]*Unknown (offset to values near end of block)* +
Contains 0 if not set
| ... | ... | | [yellow-background]*Unknown (empty values)*
4+| _values near end of block_
| ... | 8 | | [yellow-background]*Unknown*
| ... | 8 | | [yellow-background]*Unknown*
| ... | 16 | | [yellow-background]*Unknown (empty values)*
| ... | 8 | | [yellow-background]*Unknown*
| ... | 8 | | [yellow-background]*Unknown*
| ... | 16 | | [yellow-background]*Unknown (empty values)*
|===

The metadata block data type 0x0011 unknown value is 24 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| 0 | 8 | | [yellow-background]*Unknown (Metadata (not encrypted) transaction identifier?)* +
Contains 0 if not set
| 8 | 8 | | [yellow-background]*Unknown (flags?)* +
| 16 | 8 | | [yellow-background]*Unknown (Encrypted metadata block number?)*
|===

==== Notes

....
Unknown flags: 0x00000000 corresponding encrypted metadata block type 0x0013
Unknown flags: 0x00000024 corresponding encrypted metadata block type 0x0017
....

==== Volume group descriptor block

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (empty values)*
[yellow-background]*0x00 => unencrypted* +
[yellow-background]*0x01 => encrypted* +
[yellow-background]*0x02 => decrypting*
| 8 | 8 | | Encrypted metadata size in number of blocks
| 16 | 8 | | [yellow-background]*Unknown (empty values)*
| 24 | 8 | | [yellow-background]*Unknown*
| 32 | 6 | | primary encrypted metadata (physical volume) block number +
The block number is relative from the start of the physical volume
| 38 | 2 | | primary encrypted metadata (physical) volume index, where 0 is the first physical volume
| 40 | 6 | | secondary encrypted metadata (physical volume) block number +
The block number is relative from the start of the physical volume
| 46 | 2 | | secondary encrypted metadata (physical) volume index, where 0 is the first physical volume
| 48 | ... | | volume group XML plist data
|===

==== Volume group XML plist data

The volume group XML plist data consists of a single dict containing the
following keys.

[cols="1,1",options="header"]
|===
| Key | Description
| com.apple.corestorage.label.sequence | The sequence number +
Consists of a 32-bits integer +
The largest sequence number contains the most up to date information.
| com.apple.corestorage.lvg.uuid | The logical volume group identifier +
Consists of a string containing an UUID
| com.apple.corestorage.lvg.name | Name of the logical volume group +
Contains an UTF-8 encoded string
| com.apple.corestorage.pv.uuid | The physical volume identifier +
Consists of a string containing an UUID or "internal error"
| com.apple.corestorage.lvg.physicalVolumes | The physical volume identifiers +
Consist of an array containing strings of UUIDs
| com.apple.corestorage.lvg.ssd-unit-nbytes | [yellow-background]*Unknown*
|===

[yellow-background]*Same as XML plist data in block 0x0012*

[yellow-background]*Is sequence number 3 the correct one for the LV size?*

== Encrypted metadata (section)

The encrypted metadata is encrypted with:

* the primary key is the the physical volume identifier
* the secondary key is 0
* the physical volume identifier
* block size of 8192

[NOTE]
Some blocks are actually 0-byte filled and not encrypted.

The encrypted metadata consists of:

* encrypted metadata blocks of various block types
* trailing zero byte filled data
* [yellow-background]*unknown trailing data*

[yellow-background]*Seen other trailing data?*

=== LVFwiped

Some blocks contain the string "LVFwiped" where the checksum and initial value
are normally stored. They largely seem to have the block header values set but
don't contain data.

[yellow-background]*Notes: 10.8 encrypted*

....
checksum                               : 0x7746564c
initial value                          : 0x64657069
version                                : 1
block type                             : 0x0024
unknown1                               : 0x01120400
unknown2                               : 0x00000002 (Does not seem to change)
Incremented by +1 in following LVFwiped blocks
unknown3                               : 0x00000030
unknown4                               : 0x00000030 (not always similar as previous value)
unknown5                               : 0x00000009 (Does not seem to change)
block size                             : 8192
unknown6                               : 0x00000006 (Does not seem to change)
unknown7                               : 0x00000000
....

=== Metadata block data type 0x0010

Metadata block data type 0x0010 contains information about the physical volume
header.

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (Empty values)*
| 8 | 4 | | Checksum +
Contains a CRC-32 of bytes 8 to 512
| 12 | 4 | 0xffffffff | Initial value of the CRC-32
| 16 | 2 | 1 | Version
| 18 | 2 | 0x0010 | Block type
| 20 | 4 | | [yellow-background]*(Block) serial number*
| 24 | 8 | [yellow-background]*0x00000001* | [yellow-background]*Unknown*
| 32 | 8 | | [yellow-background]*Unknown (Empty values)*
| 40 | 8 | | [yellow-background]*Unknown (Empty values)*
| 48 | 8 | | [yellow-background]*Unknown (Empty values)*
| 56 | 4 | | Bytes per sector +
[yellow-background]*(header block size?)*
| 60 | 4 | | [yellow-background]*Unknown (Empty values)*
| 64 | 8 | | [yellow-background]*Unknown (Empty values)*
| 72 | 8 | | Physical volume size (in bytes)
| 80 | 16 | | [yellow-background]*Unknown* +
[yellow-background]*(Assumed to be resize flags? Could this be the resize volume size and/or resize stack size)*
| 96 | 2 | "CS" | Core Storage signature
| 98 | 4 | | Checksum algorithm +
See section: <<checksum_algorithms,Checksum algorithms>>
| 102 | 2 | 4 | [yellow-background]*Number of metadata blocks?* +
[yellow-background]*Maximum of 8?*
| 104 | 4 | | Block size (in bytes)
| 108 | 4 | | Metadata size (in bytes)
| 112 | 8 x 4 | | Array of metadata block numbers +
The block numbers are relative from the start of the physical volume
| 144 | 4 x 8 = 32 | | [yellow-background]*Reserved for medadata block numbers?*
| 176 | 4 | 16 | Key data size
| 180 | 4 | 2 | Encryption method +
2 => AES-XTS
| 184 | 16 | | Key data
| 200 | 112 | | [yellow-background]*Unknown (empty values)* +
[yellow-background]*Reserved for key data?*
| 312 | 16 | | Physical volume identifier +
Contains an UUID in big-endian +
Used as the AES-XTS tweak key
| 328 | 16 | | Logical volume group identifier (com.apple.corestorage.lv.groupUUID) +
Contains an UUID in big-endian
|===

=== Metadata block data type 0x0011

Identical to the unencrypted <<metadata_block_type_0x0011,Metadata block data type 0x0011>>

=== Metadata block data type 0x0012

....
Non-system volume only ?
00000000: 00 00 00 00 00 00 00 00  00 0a 00 00 00 00 00 00   ........ ........
00000010: 00 00 00 00 00 00 00 00  02 00 00 00 00 00 00 00   ........ ........
00000020: 01 08 00 00 00 00 00 00  01 12 00 00 00 00 00 00   ........ ........

00000030: 3c 64 69 63 74 3e 3c 6b  65 79 3e 63 6f 6d 2e 61   <dict><k ey>com.a
00000040: 70 70 6c 65 2e 63 6f 72  65 73 74 6f 72 61 67 65   pple.cor estorage
00000050: 2e 6c 61 62 65 6c 2e 73  65 71 75 65 6e 63 65 3c   .label.s equence<
00000060: 2f 6b 65 79 3e 3c 69 6e  74 65 67 65 72 20 73 69   /key><in teger si
00000070: 7a 65 3d 22 33 32 22 3e  30 78 31 3c 2f 69 6e 74   ze="32"> 0x1</int
00000080: 65 67 65 72 3e 3c 6b 65  79 3e 63 6f 6d 2e 61 70   eger><ke y>com.ap
00000090: 70 6c 65 2e 63 6f 72 65  73 74 6f 72 61 67 65 2e   ple.core storage.
000000a0: 6c 76 67 2e 75 75 69 64  3c 2f 6b 65 79 3e 3c 73   lvg.uuid </key><s
000000b0: 74 72 69 6e 67 3e 41 43  43 35 33 34 35 37 2d 34   tring>AC C53457-4
000000c0: 30 44 31 2d 34 31 37 43  2d 39 35 38 41 2d 44 43   0D1-417C -958A-DC
000000d0: 36 41 30 34 43 46 43 42  42 42 3c 2f 73 74 72 69   6A04CFCB BB</stri
000000e0: 6e 67 3e 3c 6b 65 79 3e  63 6f 6d 2e 61 70 70 6c   ng><key> com.appl
000000f0: 65 2e 63 6f 72 65 73 74  6f 72 61 67 65 2e 6c 76   e.corest orage.lv
00000100: 67 2e 6e 61 6d 65 3c 2f  6b 65 79 3e 3c 73 74 72   g.name</ key><str
00000110: 69 6e 67 3e 54 65 73 74  4c 56 47 3c 2f 73 74 72   ing>Test LVG</str
00000120: 69 6e 67 3e 3c 6b 65 79  3e 63 6f 6d 2e 61 70 70   ing><key >com.app
00000130: 6c 65 2e 63 6f 72 65 73  74 6f 72 61 67 65 2e 70   le.cores torage.p
00000140: 76 2e 75 75 69 64 3c 2f  6b 65 79 3e 3c 73 74 72   v.uuid</ key><str
00000150: 69 6e 67 3e 69 6e 74 65  72 6e 61 6c 20 65 72 72   ing>inte rnal err
00000160: 6f 72 3c 2f 73 74 72 69  6e 67 3e 3c 6b 65 79 3e   or</stri ng><key>
00000170: 63 6f 6d 2e 61 70 70 6c  65 2e 63 6f 72 65 73 74   com.appl e.corest
00000180: 6f 72 61 67 65 2e 6c 76  67 2e 70 68 79 73 69 63   orage.lv g.physic
00000190: 61 6c 56 6f 6c 75 6d 65  73 3c 2f 6b 65 79 3e 3c   alVolume s</key><
000001a0: 61 72 72 61 79 3e 3c 73  74 72 69 6e 67 3e 32 32   array><s tring>22
000001b0: 43 34 44 38 46 32 2d 32  42 33 41 2d 34 43 33 37   C4D8F2-2 B3A-4C37
000001c0: 2d 38 35 43 42 2d 42 46  31 41 38 42 39 42 34 43   -85CB-BF 1A8B9B4C
000001d0: 36 45 3c 2f 73 74 72 69  6e 67 3e 3c 2f 61 72 72   6E</stri ng></arr
000001e0: 61 79 3e 3c 2f 64 69 63  74 3e 00 00 00 00 00 00   ay></dic t>......
000001f0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
....

==== XML plist data

The XML plist data consists of a single dict containing the following keys.

[cols="1,1",options="header"]
|===
| Key | Description
| com.apple.corestorage.label.sequence | The sequence number +
Consists of a 32-bits integer +
The largest sequence number contains the most up to date information.
| com.apple.corestorage.lvg.uuid | The logical volume group identifier +
Consists of a string containing an UUID
| com.apple.corestorage.lvg.name | Name of the logical volume group +
Contains a string
| com.apple.corestorage.pv.uuid | The physical volume identifier +
Consists of a string containing an UUID or "internal error"
| com.apple.corestorage.lvg.physicalVolumes | The physical volume identifiers +
Consits of an array containing strings of UUIDs
|===

[yellow-background]*Same as XML plist data in block 0x0011*

=== Metadata block data type 0x0013

Metadata block data type 0x0013 contains information about a transaction.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Checksum +
[yellow-background]*Contains a CRC-32 of bytes ?*
| 4 | 4 | 0xffffffff | Initial value of the CRC-32
| 8 | 16 | | Volume group identifier (com.apple.corestorage.lv.groupUUID) +
Contains a UUID
| 24 | 8 | | [yellow-background]*Unknown* +
Seen: 0x13, 0x1f
| 32 | 8 | 1 | [yellow-background]*Unknown*
| 40 | 4 | | [yellow-background]*Unknown* +
Seen: 0x00000000, 0x80000000
| 44 | 4 | | Nmber of blocks in transaction fragment
| 48 | 4 | 0x01 | [yellow-background]*Unknown (index1 ?)*
| 52 | 4 | | [yellow-background]*Unknown (index2 ?)*
| 56 | 4 | | Number of (metadata block) object identifiers
| 60 | 4 | | [yellow-background]*Unknown (number of entries 2)*
| 64 | 4 | | [yellow-background]*Unknown (index5, index2 + 1 ?)*
| 68 | 4 | | [yellow-background]*Unknown (empty values)*
| 72 | 8 | | [yellow-background]*Unknown*
| 80 | 4 | 1 | [yellow-background]*Unknown*
| 84 | 4 | 1 | [yellow-background]*Unknown*
| 88 | 8 | | [yellow-background]*Unknown*
| 96 | 8 | | [yellow-background]*Unknown*
| 104 | 8 | | [yellow-background]*Unknown*
| 112 | 8 | | [yellow-background]*Unknown*
| 120 | 4 | | [yellow-background]*Unknown* +
Number of blocks to next 0x0013 block? Does not seem consistent
| 122 | 2 | | [yellow-background]*Unknown* +
Seen: 0, 1 or 2
| 122 | 2 | | [yellow-background]*Unknown* +
Seen: 0, 1, 2 or 3 (related to number of physical volumes?)
[yellow-background]*Meaning of 0 is unknown*
| 128 | ... | | Array of (metadata block) object identifiers
| ... | ... | | [yellow-background]*Unknown (Array of entries 2)*
|===

=== Metadata block data type 0x0014

Metadata block data type 0x0014 contains information about a transaction.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Checksum +
[yellow-background]*Contains a CRC-32 of bytes ?*
| 4 | 4 | 0xffffffff | Initial value of the CRC-32
| 8 | 16 | | Volume group identifier (com.apple.corestorage.lv.groupUUID) +
Contains a UUID
| 24 | 8 | 0x13 +
0x1f | [yellow-background]*Unknown*
| 32 | 8 | 1 | [yellow-background]*Unknown*
| 40 | 4 | | [yellow-background]*Unknown*
| 44 | 4 | | Nmber of blocks in transaction fragment
| 48 | 4 | 0x01 | [yellow-background]*Unknown (index1 ?)*
| 52 | 4 | | [yellow-background]*Unknown (index2 ?)*
| 56 | 4 | | Number of (metadata block) object identifiers
| 60 | 4 | | [yellow-background]*Unknown (number of entries 2)*
| 64 | 4 | | [yellow-background]*Unknown (index5, index2 + 1 ?)*
| 68 | 4 | | [yellow-background]*Unknown (empty values)*
| 72 | 8 | | [yellow-background]*Unknown*
| 80 | 4 | 1 | [yellow-background]*Unknown*
| 84 | 4 | 1 | [yellow-background]*Unknown*
| 88 | 8 | | [yellow-background]*Unknown*
| 96 | 8 | | [yellow-background]*Unknown*
| 104 | 8 | | [yellow-background]*Unknown*
| 112 | 8 | | [yellow-background]*Unknown*
| 120 | 4 | | [yellow-background]*Unknown* +
Number of blocks to next 0x0014 block? Does not seem consistent
| 122 | 2 | | [yellow-background]*Unknown* +
Seen: 0, 1 or 2
| 122 | 2 | | [yellow-background]*Unknown* +
Seen: 0 or 1
| 128 | ... | | Array of (metadata block) object identifiers
| ... | ... | | [yellow-background]*Unknown (Array of entries 2)*
|===

=== Metadata block data type 0x0016

Metadata block data type 0x0016 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of entries
| 4 | ... | | Array of entries
|===

The metadata block data type 0x0016 array entry is 12 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| 0 | 8 | | [yellow-background]*Unknown (object identifier?)* +
[yellow-background]*What does the MSB indicate?*
| 8 | 4 | | [yellow-background]*Unknown* +
Seen: 0, 1
|===

=== Metadata block data type 0x0017

Metadata block data type 0x0017 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of entries
| 4 | ... | | Array of entries
|===

The metadata block data type 0x0017 array entry is 32 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| 0 | 8 | | [yellow-background]*Unknown (transaction identifier?)*
| 8 | 4 | | [yellow-background]*Unknown*
| 12 | 4 | | [yellow-background]*Unknown (number of blocks in group)*
| 16 | 8 | | [yellow-background]*Unknown*
| 24 | 8 | | [yellow-background]*Unknown*
|===

=== Metadata block data type 0x0018

Metadata block data type 0x0018 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (0x0105 metadata block object identifier?)*
| 8 | 8 | | [yellow-background]*Unknown*
| ... | ... | | [yellow-background]*Unknown*
|===

=== [[metadata_block_0x0019]]Metadata block data type 0x0019

Metadata block data type 0x0019 contains information about the encryption
context of the logical volume. This block type is used in combination with
non-system volumes, both encrypted and non-encrypted. On system volumes this
metadata block is marked as "LVFwiped" and is empty.

The metadata block data is variable bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown*
| 8 | 8 | | [yellow-background]*Unknown*
| 16 | 8 | | [yellow-background]*Unknown (0x0605 object identifier?)*
| 24 | 8 | | [yellow-background]*Unknown (0x0205 object identifier?)*
| 32 | 8 | | Next object identifier +
Contains 0 if there is no next object
| 40 | 4 | | Total compressed data size +
[yellow-background]*aligned to dword?*
| 44 | 4 | | Total uncompressed data size
| 48 | 4 | | XML plist data offset +
The offset is relative to the start of the metadata block header
| 52 | 4 | | XML plist data size
| 56 | 4 | | [yellow-background]*Unknown*
| 60 | 2 | | [yellow-background]*Unknown (maximum number of entries?)*
| 62 | 2 | | [yellow-background]*Unknown (number of entries?)*
| 64 | 8 | | [yellow-background]*Unknown*
| 72 | 8 | | [yellow-background]*Unknown*
| 80 | ... | | [yellow-background]*Unknown (Array of entries) +
[yellow-background]*TODO: determine if an entry is 24 bytes of size?*
| ... | ... | | XML plist data or compressed data
|===

If the XML plist is uncompressed the total compressed data size will be the
same as the total uncompressed data size. If the XML plist is compressed the
data is stored using ZLIB compression (DEFLATE + ZLIB header).

The XML plist data size contains the amount of data stored within this metadata
block.

A compressed XML plist can be stored accross multiple metadata blocks. The first
metadata block will be of type 0x0019 and followed by metadata blocks of type
0x0024. The total uncompressed data size indicates the size of the data. Also
see: <<metadata_block_0x0024,Metadata block data type 0x0024>>.

==== XML plist data

XML plist main dict containing:

[cols="1,1",options="header"]
|===
| Key | Description
| com.apple.corestorage.lvf.revertState | Optional revert state
| com.apple.corestorage.lvf.encryption.context | Optional encryption context dict +
Contains an <<encryption_context_plist,encryption context plist>>
| DefaultEncryptionContext | [yellow-background]*Unknown* +
Consists of a 32-bits integer
| com.apple.corestorage.lvf.groupUUID | The logical volume group identifier +
Contains an UUID
| com.apple.corestorage.lvf.sequence | The sequence number +
Consists of a 32-bits integer +
The largest sequence number contains the most up to date information.
| com.apple.corestorage.lvf.uuid | The logical volume family identifier +
Contains an UUID
| PreviousEncryptionContext | [yellow-background]*Unknown* +
Consists of a 32-bits integer
| com.apple.corestorage.lvf.advertisedBlkSizes | [yellow-background]*Unknown (advertised block sizes?)* +
Values seen: 1
| com.apple.corestorage.lvf.encryption.type | Optional encryption type +
Values seen: "None"
| com.apple.corestorage.lvf.encryption.status | Optional encryption status +
Values seen: "Unlocked"
| com.apple.corestorage.lvf.conversion.lvuuid | Optional logical volume identifier +
Contains an UUID
| com.apple.corestorage.lvf.conversion.starttime | Optional conversion start time +
Contains an integer
|===

=== Metadata block data type 0x001a

Metadata block data type 0x001a contains information about the logical volume.
The block data also contains the lv.familyUUID which is needed to compute the
tweak key to decrypt encrypted volumes.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Object identifier of the logical volume
| 8 | 8 | | [yellow-background]*Unknown (0x0305 metadata block object identifier?)*
| 16 | 8 | | [yellow-background]*Unknown (empty values)*
| 24 | 8 | | [yellow-background]*Unknown (empty values)*
| 32 | 8 | | [yellow-background]*Unknown*
| 40 | 8 | | [yellow-background]*Unknown (0x0021 metadata block object identifier?)*
| 48 | 8 | | [yellow-background]*Unknown (0x0505 metadata block object identifier?)*
| 56 | 4 | | [yellow-background]*Unknown (compressed data size?)*
| 60 | 4 | | [yellow-background]*Unknown (uncompressed data size?)*
| 64 | 4 | | XML plist data offset +
The offset is relative to the start of the metadata block header
| 68 | 4 | | XML plist data size
| 72 | ... | [yellow-background]*Unknown*
| ... | ... | | XML plist data
|===

==== XML plist data

The XML plist data consists of a single dict containing the following keys.

[cols="1,1",options="header"]
|===
| Key | Description
| com.apple.corestorage.lv.familyUUID | The volume family identifier +
Contains an UUID
| com.apple.corestorage.lv.groupUUID | The volume group identifier +
Contains an UUID
| com.apple.corestorage.lv.sequence | The sequence number +
Consists of a 32-bits integer +
The largest sequence number contains the most up to date information.
| com.apple.corestorage.lv.version | Version stored as 32-bit where the upper 16-bit is the major number and the lower 16-bit the minor number
| com.apple.corestorage.lv.contenthint | Indicator of the contents of the volume, e.g. Apple_HFS
| com.apple.corestorage.lv.name | Name of the volume +
Contains an UTF-8 encoded string
| com.apple.corestorage.lv.size | Size of the volume in bytes
| com.apple.corestorage.lv.uuid | The logical volume identifier +
Contains an UUID
|===

[NOTE]
There is no specific ordering of the keys.

[NOTE]
The name of the volume is not unique.

=== Metadata block data type 0x001c

Metadata block data type 0x001c contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (empty values)*
| 8 | 8 | | [yellow-background]*Number of entries*
|===

The array entry is 32 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown (empty values)*
| 4 | 4 | | [yellow-background]*Unknown (number of elements that the 0x0022 object contains?)*
| 8 | 8 | | [yellow-background]*Unknown (Physical volume block number)*
| 16 | 8 | | [yellow-background]*Unknown (0x0022 object identifier?)*
| 24 | 8 | | [yellow-background]*Unknown (0x0405 object identifier?)*
|===

=== Metadata block data type 0x001d

Metadata block data type 0x001d contains information about unused areas of
a physical volume.

The metadata block data is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 16 | | [yellow-background]*Unknown (empty values)*
| 16 | 8 | | Number of entries
| 24 | ... | Array of entries
|===

The array entry is 16 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Size in number of blocks
| 4 | 4 | | [yellow-background]*Unknown (flags?)* +
Seen: 0x00000000, 0x80000000
| 8 | 6 | | Physical volume block number +
The block number is relative from the start of the physical volume
| 14 | 2 | | Physical volume index, where 0 is the first physical volume
|===

=== Metadata block data type 0x0021

Metadata block data type 0x0021 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[yellow-background]*Present when volume group contains a volume?*

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | | [yellow-background]*Unknown (Number of entries)*
| 2 | 4 | | [yellow-background]*Unknown (Size in number of blocks)*
|===

=== Metadata block data type 0x0022

Metadata block data type 0x0022 contains information about unused areas of
a physical volume.

The metadata block data is 48 bytes in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (Next 0x0022 block?)* +
[yellow-background]*0 if not set?* +
[yellow-background]*corresponds to unknown3 (value before block number) in the metadata block header*
| 8 | 8 | | Number of entries
| 16 | ... | | Array of entries
|===

The array entry is 32 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Size in number of blocks
| 8 | 8 | | [yellow-background]*Unknown*
| 16 | 8 | | [yellow-background]*Unknown (0x001d metadata block object identifier?)* +
Contains 0 if not set
| 24 | 8 | | [yellow-background]*Unknown (0x001d metadata block object identifier?)* +
Contains 0 if not set
|===

[yellow-background]*In combination with 0x001d contains the block extents of
the free space areas? Where 0x001d contains the block extents.*

=== [[metadata_block_0x0024]]Metadata block data type 0x0024

Metadata block data type 0x0024 is used to store data that does not fit within
a single metadata block e.g. the XML plist data in metadata block 0x0019. Where
the individual metadata blocks are a chain of data segments. Also see:
<<metadata_block_0x0019,Metadata block data type 0x0019>>.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Next object identifier +
Contains 0 if there is no next object
| 8 | 4 | | XML plist data size
| 12 | 4 | | [yellow-background]*Unknown*
| 16 | ... | XML plist data
|===

=== Metadata block data type 0x0025

Metadata block data type 0x0025 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown (Next 0x0025 block?)* +
[yellow-background]*0 if not set?*
| 8 | 8 | | Number of entries
| 16 | ... | | Array of entries
|===

The array entry is 24 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | [yellow-background]*Unknown*
| 8 | 8 | | [yellow-background]*Unknown*
| 16 | 8 | | [yellow-background]*Unknown (transaction identifier?)*
|===

=== Metadata block data type 0x0105

Metadata block data type 0x0105 contains information about logical volumes.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of entries
| 4 | 4 | | [yellow-background]*Unknown (Empty values)*
| 8 | ... | | Array of entries
|===

The array entry is 16 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Object identifier +
Should map to a metadata block of type 0x0019 with information about a logical volume
| 8 | 8 | | [yellow-background]*Unknown*
|===

=== Metadata block data type 0x0205

....
0000e040: 01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
0000e050: 06 00 00 00 00 00 00 00  ff ff ff ff ff ff ff ff   ........ ........
0000e060: ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........
0000e070: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
...
0000fff0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........

10.8 encrypted
00000000: 01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
00000010: 06 00 00 00 00 00 00 00  ff ff ff ff ff ff ff ff   ........ ........
00000020: ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........
00000030: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
...
00001fb0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........

10.10 unencrypted
00000000: 01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
00000010: 0b 00 00 00 00 00 00 00  ff ff ff ff ff ff ff ff   ........ ........
00000020: ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff   ........ ........
00000030: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
...
00001fb0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
....

=== Metadata block data type 0x0304

Metadata block data type 0x0304 contains information about [yellow-background]*TODO: describe*

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of entries
| 4 | 4 | | [yellow-background]*Unknown (Empty values)*
| 8 | ... | | Array of entries
|===

The metadata block data type 0x0305 array entry is 40 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| 0 | 8 | | [yellow-background]*Unknown (empty values)*
| 8 | 8 | | Logical volume block number
| 16 | 4 | | Size in number of blocks
| 20 | 4 | | [yellow-background]*Unknown (flags?)* +
[yellow-background]*0 if not set e.g. non-removable?*
| 24 | 4 | | [yellow-background]*Unknown (empty values)*
| 28 | 4 | | [yellow-background]*Unknown (empty values)*
| 32 | 4 | | Physical volume block number +
The block number is relative from the start of the physical volume
[yellow-background]*0 if not set e.g. non-removable?*
| 36 | 4 | | [yellow-background]*Unknown (empty values)*
|===

=== Metadata block data type 0x0305

Metadata block data type 0x0305 contains information about location of the
logical volume data inside the physical volumes.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 1 | Number of entries
| 4 | 4 | | [yellow-background]*Unknown (empty values)*
| 8 | ... | | Array of entries
|===

The metadata block data type 0x0305 array entry is 40 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| 0 | 8 | | [yellow-background]*Unknown (empty values)*
| 8 | 8 | | Logical volume block number
| 16 | 4 | | Size as number of blocks
| 20 | 4 | | [yellow-background]*Unknown (flags?)* +
Seen: 0, 0x00400000
| 24 | 4 | | [yellow-background]*Unknown (empty values)*
| 28 | 4 | | [yellow-background]*Unknown (empty values)*
| 32 | 6 | | Physical volume block number
| 36 | 2 | | Physical volume index
|===

[NOTE]
The physical volume block number is relative from the corresponding entry in
the metadata block data type 0x0505 if available, otherwise the block number
is relative from the start of the physical volume.

=== Metadata block data type 0x0404

Metadata block data type 0x0404 contains information about data and metadata
areas of the physical volume.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of data area descriptor
| 4 | 4 | | [yellow-background]*Unknown (Empty values)*
| 8 | ... | | Array of data area descriptors +
See section: <<data_area_descriptor,Data area descriptor>>
|===

==== [[data_area_descriptor]]Data area descriptor

The data area descriptor is 48 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | physiscal block number
| 8 | 8 | | number of blocks
| 16 | 8 | | Object identifier of the logical volume or a predefined <<data_area_object_identifier,data area object identifier>>
| 24 | 8 | | [yellow-background]*Unknown (copy number?)* +
[yellow-background]*Where 0 is the original?*
| 32 | 8 | | [yellow-background]*Unknown (empty values)*
| 40 | 8 | | logical block number +
Contains the block number within the logical volume the data area is mapped to.
|===

....
Do multiple successive 0x0404 block form a single sequence of extents?
....

=== Metadata block data type 0x0405

Metadata block data type 0x0405 contains information about data and metadata
areas of a physical volume.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of data area descriptor
| 4 | 4 | | [yellow-background]*Unknown (Empty values)*
| 8 | ... | | Array of data area descriptors +
See section: <<data_area_descriptor,Data area descriptor>>
|===

==== [[data_area_descriptor]]Data area descriptor

The data area descriptor is 48 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Physical volume block number
| 8 | 8 | | Size as number of blocks
| 16 | 8 | | Object identifier of the logical volume or a predefined <<data_area_object_identifier,data area object identifier>>
| 24 | 8 | | [yellow-background]*Unknown (copy number?)* +
[yellow-background]*Where 0 is the original?*
| 32 | 8 | | [yellow-background]*Unknown (empty values)*
| 40 | 8 | | Logical volume block number +
0 (0x0000000000000000) => [yellow-background]*Unknown* +
-2 (0xfffffffffffffffe) => [yellow-background]*Unknown (Continuation?)*
|===

==== [[data_area_object_identifier]]Data area object identifier

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| -3 (0xfffffffffffffffd) | | Encrypted metadata
| -4 (0xfffffffffffffffc) | | Physical volume header
| -5 (0xfffffffffffffffb) | | Unencrypted metadata
|===

=== Metadata block data type 0x0505

Metadata block data type 0x0505 contains information about location of the
logical volume data inside the physical volumes. This block type is used in
combination with encrypted system volumes.

The metadata block data is variable in size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 1 | Number of entries
| 4 | 4 | | [yellow-background]*Unknown (empty values)*
| 8 | ... | | Array of entries
|===

The metadata block data type 0x0505 array entry is 16 bytes in size and
consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Size as number of blocks +
| 8 | 6 | | Physical volume block number +
The block number is relative from the start of the physical volume
| 14 | 2 | | Physical volume index, where 0 is the first physical volume
|===

[yellow-background]*TODO: determine how entries, other than the first, should
be interpreted.*

[yellow-background]*TODO: are these referred to as Encrypted Extents?*

=== Metadata block data type 0x0605

....
Seen in system volume

00000000: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
...
00001fb0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........

10.8 encrypted
00000000: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
...
00001fb0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........

10.10 unencrypted
00000000: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
...
00001fb0: 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ........ ........
....

== [[encryption_context_plist]]The encryption context plist

The encryption context plist either the EncryptedRoot.plist.wipekey stored on
the "Recovery HD" partition of the system disk that also contains the FileVault
encrypted volume, or the XML plist-like data identified as
"com.apple.corestorage.lvf.encryption.context" stored in the encrypted
metadata, contains the encrypted VMKs necessary to unlock the encrypted volume.

The EncryptedRoot.plist.wipekey is encrypted and can be decrypted using 128-bit
AES-XTS:

* as primary key the physical volume identifier of the FileVault encrypted volume (128-bit)
* as secondary key 0 (128-bit)
* a tweak value of 0
* a cypher block size as the entire file

The unencrypted encryption context plist contains:

* A PassphraseWrappedKEKStruct; one for each recovery or user passwords
* A KEKWrappedVolumeKeyStruct containing the volume key

Below an example of the contents of an unencrypted EncryptedRoot.plist.wipekey
file.

....
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>ConversionInfo</key>
        <dict>
                <key>ConversionStatus</key>
                <string>Complete</string>
                <key>TargetContext</key>
                <integer>1</integer>
        </dict>
        <key>CryptoUsers</key>
        <array>
                <dict>
                        ...
                        <key>PassphraseWrappedKEKStruct</key>
                        <data>
                        ...
                        </data>
                        ...
                </dict>
                <dict>
                ...
                </dict>
        </array>
        <key>LastUpdateTime</key>
        <integer>1323243315</integer>
        <key>WrappedVolumeKeys</key>
        <array>
                <dict>
                        <key>BlockAlgorithm</key>
                        <string>None</string>
                        <key>KEKWrappedVolumeKeyStruct</key>
                        <data>
                        </data>
                        ...
                </dict>
                <dict>
                        <key>BlockAlgorithm</key>
                        <string>AES-XTS</string>
                        <key>KEKWrappedVolumeKeyStruct</key>
                        <data>
                        ...
                        </data>
                        ...
                </dict>
        </array>
</dict>
</plist>
....

[NOTE]
The doctype and plist definition are not present in the XML plist-like data
identified as "com.apple.corestorage.lvf.encryption.context".

Both the PassphraseWrappedKEKStruct and KEKWrappedVolumeKeyStruct are stored as
base64.

[yellow-background]*Is a 52 character limit (per line) enforced for the base64 encoded data?*

The purpose of the first KEKWrappedVolumeKeyStruct in the
EncryptedRoot.plist.wipekey file is currently unknown.

[cols="1,1",options="header"]
|===
| Key | Description
| ConversionInfo | Optional conversion status information dict
| CryptoUsers | Array of crypto user dicts +
This array is empty when the logical volume is not pass-phrase/password protected
| LastUpdateTime | Date and time the EncryptedRoot.plist.wipekey was updated. +
Contains the number of seconds since January 1, 1970 00:00:00 UTC.
| WrappedVolumeKeys | Array of wrapped volume key dicts
|===

=== ConversionInfo

Dict containing information about the conversion status:

[cols="1,1",options="header"]
|===
| Key | Description
| ConversionStatus | The volume conversion (or encyption) status: +
Complete => the volume is fully encrypted +
Converting => the volume is being encrypted +
NoConversion => [yellow-background]*TODO* +
Pending => the volume is to be encrypted.
| TargetContext | [yellow-background]*Unknown* +
Seen: 0 and 1 (partial encrypted volume)
|===

=== CryptoUsers

Dict containing:

[cols="1,1",options="header"]
|===
| Key | Description
| EFILoginGraphics |
| KeyEncryptingKeyIdent | The identifier of the key encrypting key +
Consists of a string containing an UUID +
[yellow-background]*Corresponds to an entry in WrappedVolumeKeys?*
| PassphraseHint | The passphrase hint
| PassphraseWrappedKEKStruct | Optional base 64 encoded binary data that contains the password wrapped key encrypted key +
See section: <<passphrase_wrapped_kek_struct,PassphraseWrappedKEKStruct>>
| UserFullName | User full name
| UserIcon | User icon +
Contains base64 encoded data +
[yellow-background]*TODO what image format?*
| UserIdent | User identifier +
Consists of a string containing an UUID
| UserNamesData | The usernames data +
Consists of an array containing base64 encoded data or an empty string if not set
| UserType | [yellow-background]*The user type flags?* +
Seen: 0x10010005, 0x10060002
| WrapVersion | [yellow-background]*The format version of the PassphraseWrappedKEKStruct ?* +
Seen 1
|===

==== [[passphrase_wrapped_kek_struct]]PassphraseWrappedKEKStruct

The PassphraseWrappedKEKStruct is 284 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 3 | Value type
| 4 | 4 | 16 | Value size
| 8 | 16 | | Salt for the PBKDF2 +
(Password-Based Key Derivation Function)
| 24 | 4 | 16 | Value type
| 28 | 4 | 24 | Value size
| 32 | 24 | | Primary key to unlock the KEKWrappedVolumeKeyStruct +
Contains WrappedKEK
| 56 | 4 | 8 | [yellow-background]*Unknown*
| 60 | 8 | | [yellow-background]*Unknown (empty values)*
| 68 | 4 | 1 | [yellow-background]*Unknown*
| 72 | 72 | | [yellow-background]*Unknown (empty values)*
| 144 | 4 | 1 | [yellow-background]*Unknown*
| 148 | 4 | 3 | [yellow-background]*Unknown*
| 152 | 4 | 10 | [yellow-background]*Unknown*
| 156 | 12 | | [yellow-background]*Unknown*
| 168 | 4 | | [yellow-background]*Unknown*
| 172 | 4 | | Number of iterations for the PBKDF2 +
(Password-Based Key Derivation Function)
| 176 | 4 | 1 | [yellow-background]*Unknown*
| 180 | 4 | 3 | [yellow-background]*Unknown*
| 184 | 4 | 10 | [yellow-background]*Unknown*
| 188 | 96 | | [yellow-background]*Unknown*
|===

=== WrappedVolumeKeys

Dict containing information about the volume key:

[cols="1,1",options="header"]
|===
| Key | Description
| BlockAlgorithm | The encryption method. +
Seen: AES-XTS, None
| KEKWrappedVolumeKeyStruct | Base 64 encoded binary data that contains the key encrypted key wrapped volume key }
See section: <<key_encrypted_key_wrapped_volume_key,Key encrypted key wrapped volume key>>
| KeyEncryptingKeyIdent | The identifier of the key encrypting key +
Consists of a string containing an UUID +
[yellow-background]*Corresponds to an entry in CryptoUsers?*
| VolumeKeyIdent | The identifier of the volume key +
Consists of a string containing an UUID
| VolumeKeyIndex | Index of the volume key within the array
| WrapVersion | [yellow-background]*The format version of the KEKWrappedVolumeKeyStruct ?* +
Seen 1
|===

==== [[key_encrypted_key_wrapped_volume_key]]Key encrypted key wrapped volume key

The key encrypted key wrapped volume key (KEKWrappedVolumeKeyStruct) is 256
bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 2 | Value type
| 4 | 4 | 24 | Value size
| 8 | 24 | | Volume key +
Contains a <<wrapped_kek,WrappedKEK>>
| 32 | 4 | 8 | [yellow-background]*Unknown*
| 36 | 8 | | [yellow-background]*Unknown (empty values)*
| 44 | 4 | 1 | [yellow-background]*Unknown*
| 48 | 4 | | [yellow-background]*Unknown (empty values)*
| 52 | 4 | 1 | [yellow-background]*Unknown*
| 56 | 4 | 8 | [yellow-background]*Unknown*
| 60 | 8 | | [yellow-background]*Unknown (empty values)*
| 68 | 4 | 1 | [yellow-background]*Unknown*
| 72 | 72 | | [yellow-background]*Unknown (empty values)*
| 144 | 4 | 1 | [yellow-background]*Unknown*
| 148 | 4 | 3 | [yellow-background]*Unknown*
| 152 | 4 | 10 | [yellow-background]*Unknown*
| 156 | 96 | | [yellow-background]*Unknown*
| 252 | 4 | 1 | [yellow-background]*Unknown*
|===

=== [[wrapped_kek]]WrappedKEK

The WrappedKEK is 24 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 8 | | Initialization vector +
Once unencrypted it should be: "\xa6\xa6\xa6\xa6\xa6\xa6\xa6\xa6"
| 8 | 16 | | Key data
|===

== Notes

=== Crypto user

....
Some user entries do not contain PassphraseWrappedKEKStruct

<dict>
  <key>ExternalKeyProps</key>
  <dict>
    <key>EncryptedBlob</key>
    <data>
    AggED8YNUFMrSX/Hz5KRjdN2WKr6tkiq6YWelbJlFjzq
    ...
    KYUuxmQh1MZpasdHHq3PLAw=
    </data>
    <key>EncryptionAlgorithm</key>
    <string>iCloud PCS</string>
    <key>OS User UUID</key>
    <string>12345678-1234-1234-1234-1234567890ab</string>
    <key>Version</key>
    <string>1</string>
    <key>iCloud User ID</key>
    <string>email@example.com</string>
  </dict>
  <key>KeyEncryptingKeyIdent</key>
  <string>12345678-1234-1234-1234-1234567890ab</string>
  <key>KeyWrappedKEKStruct</key>
  <data>
  AgAAABgAAABtlTI+StOM45NfgYzpQH7gFnseJyML6nMAAAAAAAAA
  ...
  heWm7on1IkAoDcGei2rgGhEKAQAAAA==
  </data>
  <key>PassphraseHint</key>
  <string>Admin Hint</string>
  <key>UserIdent</key>
  <string>12345678-1234-1234-1234-1234567890ab</string>
  <key>UserType</key>
  <integer>536936456</integer>
  <key>WrapVersion</key>
  <integer>1</integer>
</dict>
....

=== Conversion information

....
Unencrypted
<dict ID="0">
  <key>com.apple.corestorage.lvf.encryption.context</key>
  <dict ID="1">
    <key>CryptoUsers</key>
    <array ID="2"></array> (empty)
    <key>LastUpdateTime</key>
    <integer size="64" ID="3">0x500ba053</integer>
    <key>WrappedVolumeKeys</key>

    <array ID="4">
      <dict ID="5">
        <key>VolumeKeyIndex</key>
        <integer size="32" ID="6">0x0</integer>
        <key>VolumeKeyIdent</key>
        <string ID="7">AD2FA664-BC4D-491A-936C-F745295B3AC5</string>
        <key>WrapVersion</key>
        <reference IDREF="6"/>
        <key>KeyEncryptingKeyIdent</key>
        <string ID="8">none</string>
        <key>BlockAlgorithm</key>
        <string ID="9">None</string>
        <key>KEKWrappedVolumeKeyStruct</key>
        <data ID="10"></data>
      </dict>
    </array>

    <key>ConversionInfo</key>
    <dict ID="11">
      <key>TargetContext</key>
      <reference IDREF="6"/>
      <key>ConversionStatus</key>
      <string ID="12">NoConversion</string>
    </dict>
  </dict>

  <key>DefaultEncryptionContext</key>
  <reference IDREF="6"/>
  <key>com.apple.corestorage.lvf.groupUUID</key>
  <string ID="13">ACC53457-40D1-417C-958A-DC6A04CFCBBB</string>
  <key>com.apple.corestorage.lvf.sequence</key>
  <integer size="32" ID="14">0x2</integer>
  <key>com.apple.corestorage.lvf.uuid</key>
  <string ID="15">456AF40B-AF12-4BA6-AF74-9E3D253C9DBD</string>
  <key>PreviousEncryptionContext</key>
  <reference IDREF="6"/>
  <key>com.apple.corestorage.lvf.advertisedBlkSizes</key>
  <integer size="32" ID="16">0x1</integer>
</dict>



Encrypted
<dict ID="0">
  <key>com.apple.corestorage.lvf.encryption.context</key>
  <dict ID="1">
    <key>CryptoUsers</key>
    <array ID="2">
      <dict ID="3">
        <key>PassphraseWrappedKEKStruct</key>
        <data ID="4">AwAAABAAAAAhJ7cnW0kP7akL3+XPVv/dEAAAABgAAAB92Y6avvO2JVmeOlMPWt0yaiUX13HXSN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAKAAAA5WzYfJ6wBsZwAzRpF68AAAEAAAABAAAAAwAAAAoAAAB0TZG7mq/T2CYOGjrQvWzHVQDX8bjI4OqM6RjgHLHbsYsTc9qn3fhZ/N5oSdzyTH3KddNAL8VI9viqTQ/rZ84k5feUJCHCiSx3Gw2joJeESu90iynb2oU8o36VS20BRNE=</data>
        <key>WrapVersion</key>
        <integer size="32" ID="5">0x1</integer>
        <key>UserType</key>
        <integer size="32" ID="6">0x10000001</integer>
        <key>UserIdent</key>
        <string ID="7">A27BFBF4-5E71-499E-A50E-0F3C9A93A65E</string>
        <key>UserNamesData</key>
        <string ID="8"></string>
        <key>PassphraseHint</key>
        <reference IDREF="8"/>
        <key>KeyEncryptingKeyIdent</key>
        <string ID="9">C8787204-AE27-4823-A24F-FB8C46CDB21A</string>
        <key>UserFullName</key>
        <reference IDREF="8"/>
        <key>UserIcon</key>
        <data ID="10"></data>
        <key>EFILoginGraphics</key>
        <data ID="11"></data>
      </dict>
    </array>
    <key>LastUpdateTime</key>
    <integer size="64" ID="12">0x500ba362</integer>
    <key>WrappedVolumeKeys</key>
    <array ID="13">
      <dict ID="14">
        <key>VolumeKeyIndex</key>
        <integer size="32" ID="15">0x0</integer>
        <key>VolumeKeyIdent</key>
        <string ID="16">064F0E0F-93D8-4B9B-86BD-3B88E975B986</string>
        <key>WrapVersion</key>
        <reference IDREF="15"/>
        <key>KeyEncryptingKeyIdent</key>
        <string ID="17">none</string>
        <key>BlockAlgorithm</key>
        <string ID="18">None</string>
        <key>KEKWrappedVolumeKeyStruct</key>
        <data ID="19"></data>
      </dict>

      <dict ID="20">
        <key>VolumeKeyIndex</key>
        <reference IDREF="5"/>
        <key>VolumeKeyIdent</key>
        <string ID="21">32686E63-1B7B-4789-A0AE-DBCDEFF59A9F</string>
        <key>WrapVersion</key>
        <reference IDREF="5"/>
        <key>KeyEncryptingKeyIdent</key>
        <reference IDREF="9"/>
        <key>BlockAlgorithm</key>
        <string ID="22">AES-XTS</string>
        <key>KEKWrappedVolumeKeyStruct</key>
        <data ID="23">AgAAABgAAACH2P5JK0cnneEO1tyc/QE548bziUUWHjAIAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAKAAAA5WzYfJ6wBsZwAzRpVBN8bKAN1e/A5eZ1NzNRgU3IIklZRGgeb/MZlvBJdhWzwqPsfsd9DY95B7bvRxR2s1/16uoDnFUaLQ8JJZaM1mgPR63ih7kOGgOS+GlQlkQz/2SWAQAAAA==</data>
      </dict>
    </array>
    <key>ConversionInfo</key>
    <dict ID="24">
      <key>TargetContext</key>
      <reference IDREF="5"/>
      <key>ConversionStatus</key>
      <string ID="25">NoConversion</string>
    </dict>
  </dict>
  <key>DefaultEncryptionContext</key>
  <integer size="32" ID="26">0x1</integer>
  <key>com.apple.corestorage.lvf.groupUUID</key>
  <string ID="27">ACC53457-40D1-417C-958A-DC6A04CFCBBB</string>
  <key>com.apple.corestorage.lvf.sequence</key>
  <integer size="32" ID="28">0x2</integer>
  <key>com.apple.corestorage.lvf.uuid</key>
  <string ID="29">697CA9C9-2DB2-4313-9FD5-C06BC12317AE</string>
  <key>PreviousEncryptionContext</key>
  <reference IDREF="15"/>
  <key>com.apple.corestorage.lvf.advertisedBlkSizes</key>
  <integer size="32" ID="30">0x1</integer>
</dict>

System volume:
LVFwiped
....

=== Backup of EncryptedRoot.plist.wipekey?

/System/Library/Caches/com.apple.corestorage/EncryptedRoot.plist.wipekey

=== Determining the logical volume offset

Use the most recent transaction:

* If available, use the information in metadata block data type 0x0505 to determine base offset
* Use the information in metadata block data type 0x0305 to determine the block number of the first logical volume segment

=== Partial encrypted volume

* information in 0x0505 and 0x0305 do not seem to point to encrypted logical volume header
* encryption context plist stored in metadata, whereas in the finalized encrypted volume these metadata blocks are marked as LVFwiped
* ConversionStatus in the encryption context plist is Converting

:numbered!:
[appendix]
== References

`[IEEE 1619-2007]`

[cols="1,5",options="header"]
|===
| Title: | The XTS-AES Tweakable Block Cipher (IEEE 1619-2007)
| Author(s): | IEEE
| Date: | April 18, 2008
| URL: | http://axelkenzo.ru/downloads/1619-2007-NIST-Submission.pdf +
https://bitbucket.org/garethl/xtssharp/src/0e6a81a823e9/docs/1619-2007-NIST-Submission.pdf
|===

`[RFC1950]`

[cols="1,5",options="header"]
|===
| Title: | ZLIB Compressed Data Format Specification
| Version: | 3.3
| Author(s): | P. Deutsch, J-L. Gailly
| Date: | May 1996
| URL: | http://www.ietf.org/rfc/rfc1950.txt
|===

`[RFC1951]`

[cols="1,5",options="header"]
|===
| Title: | DEFLATE Compressed Data Format Specification
| Version: | 1.3
| Author(s): | P. Deutsch
| Date: | May 1996
| URL: | http://www.ietf.org/rfc/rfc1951.txt
|===

`[RFC2898]`
[cols="1,5",options="header"]
|===
| Title: | PKCS #5: Password-Based Cryptography Specification
| Version: | 2.0
| Author(s): | B. Kaliski
| Date: | September 2000
| URL: | https://www.ietf.org/rfc/rfc2898.txt
|===

`[RFC3394]`
[cols="1,5",options="header"]
|===
| Title: | Advanced Encryption Standard (AES) Key Wrap Algorithm
| Author(s): | J. Schaad, R. Housley
| Date: | September 2002
| URL: | https://www.ietf.org/rfc/rfc3394.txt
|===

`[WIKIPEDIA-PBKDF2]`

[cols="1,5",options="header"]
|===
| Title: | PBKDF2
| URL: | http://en.wikipedia.org/wiki/PBKDF2
|===

[appendix]
== GNU Free Documentation License

Version 1.3, 3 November 2008
Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license
document, but changing it is not allowed.

=== 0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other functional
and useful document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without modifying it,
either commercially or noncommercially. Secondarily, this License preserves for
the author and publisher a way to get credit for their work, while not being
considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the
document must themselves be free in the same sense. It complements the GNU
General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software,
because free software needs free documentation: a free program should come with
manuals providing the same freedoms that the software does. But this License is
not limited to software manuals; it can be used for any textual work,
regardless of subject matter or whether it is published as a printed book. We
recommend this License principally for works whose purpose is instruction or
reference.

=== 1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that contains
a notice placed by the copyright holder saying it can be distributed under the
terms of this License. Such a notice grants a world-wide, royalty-free license,
unlimited in duration, to use that work under the conditions stated herein. The
"Document", below, refers to any such manual or work. Any member of the public
is a licensee, and is addressed as "you". You accept the license if you copy,
modify or distribute the work in a way requiring permission under copyright law.

A "Modified Version" of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modifications and/or
translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of the
Document that deals exclusively with the relationship of the publishers or
authors of the Document to the Document's overall subject (or to related
matters) and contains nothing that could fall directly within that overall
subject. (Thus, if the Document is in part a textbook of mathematics, a
Secondary Section may not explain any mathematics.) The relationship could be a
matter of historical connection with the subject or with related matters, or of
legal, commercial, philosophical, ethical or political position regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles are
designated, as being those of Invariant Sections, in the notice that says that
the Document is released under this License. If a section does not fit the
above definition of Secondary then it is not allowed to be designated as
Invariant. The Document may contain zero Invariant Sections. If the Document
does not identify any Invariant Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed, as
Front-Cover Texts or Back-Cover Texts, in the notice that says that the
Document is released under this License. A Front-Cover Text may be at most 5
words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy, represented
in a format whose specification is available to the general public, that is
suitable for revising the document straightforwardly with generic text editors
or (for images composed of pixels) generic paint programs or (for drawings)
some widely available drawing editor, and that is suitable for input to text
formatters or for automatic translation to a variety of formats suitable for
input to text formatters. A copy made in an otherwise Transparent file format
whose markup, or absence of markup, has been arranged to thwart or discourage
subsequent modification by readers is not Transparent. An image format is not
Transparent if used for any substantial amount of text. A copy that is not
"Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain ASCII without
markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modification. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited
only by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself, plus such
following pages as are needed to hold, legibly, the material this License
requires to appear in the title page. For works in formats which do not have
any title page as such, "Title Page" means the text near the most prominent
appearance of the work's title, preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of the
Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose title
either is precisely XYZ or contains XYZ in parentheses following text that
translates XYZ in another language. (Here XYZ stands for a specific section
name mentioned below, such as "Acknowledgements", "Dedications",
"Endorsements", or "History".) To "Preserve the Title" of such a section when
you modify the Document means that it remains a section "Entitled XYZ"
according to this definition.

The Document may include Warranty Disclaimers next to the notice which states
that this License applies to the Document. These Warranty Disclaimers are
considered to be included by reference in this License, but only as regards
disclaiming warranties: any other implication that these Warranty Disclaimers
may have is void and has no effect on the meaning of this License.

=== 2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either commercially or
noncommercially, provided that this License, the copyright notices, and the
license notice saying this License applies to the Document are reproduced in
all copies, and that you add no other conditions whatsoever to those of this
License. You may not use technical measures to obstruct or control the reading
or further copying of the copies you make or distribute. However, you may
accept compensation in exchange for copies. If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and you may
publicly display copies.

=== 3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have printed
covers) of the Document, numbering more than 100, and the Document's license
notice requires Cover Texts, you must enclose the copies in covers that carry,
clearly and legibly, all these Cover Texts: Front-Cover Texts on the front
cover, and Back-Cover Texts on the back cover. Both covers must also clearly
and legibly identify you as the publisher of these copies. The front cover must
present the full title with all words of the title equally prominent and
visible. You may add other material on the covers in addition. Copying with
changes limited to the covers, as long as they preserve the title of the
Document and satisfy these conditions, can be treated as verbatim copying in
other respects.

If the required texts for either cover are too voluminous to fit legibly, you
should put the first ones listed (as many as fit reasonably) on the actual
cover, and continue the rest onto adjacent pages.

If you publish or distribute Opaque copies of the Document numbering more than
100, you must either include a machine-readable Transparent copy along with
each Opaque copy, or state in or with each Opaque copy a computer-network
location from which the general network-using public has access to download
using public-standard network protocols a complete Transparent copy of the
Document, free of added material. If you use the latter option, you must take
reasonably prudent steps, when you begin distribution of Opaque copies in
quantity, to ensure that this Transparent copy will remain thus accessible at
the stated location until at least one year after the last time you distribute
an Opaque copy (directly or through your agents or retailers) of that edition
to the public.

It is requested, but not required, that you contact the authors of the Document
well before redistributing any large number of copies, to give them a chance to
provide you with an updated version of the Document.

=== 4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under the
conditions of sections 2 and 3 above, provided that you release the Modified
Version under precisely this License, with the Modified Version filling the
role of the Document, thus licensing distribution and modification of the
Modified Version to whoever possesses a copy of it. In addition, you must do
these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct from that
of the Document, and from those of previous versions (which should, if there
were any, be listed in the History section of the Document). You may use the
same title as a previous version if the original publisher of that version
gives permission.

B. List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified Version,
together with at least five of the principal authors of the Document (all of
its principal authors, if it has fewer than five), unless they release you from
this requirement.

C. State on the Title page the name of the publisher of the Modified Version,
as the publisher.

D. Preserve all the copyright notices of the Document.

E. Add an appropriate copyright notice for your modifications adjacent to the
other copyright notices.

F. Include, immediately after the copyright notices, a license notice giving
the public permission to use the Modified Version under the terms of this
License, in the form shown in the Addendum below.

G. Preserve in that license notice the full lists of Invariant Sections and
required Cover Texts given in the Document's license notice.

H. Include an unaltered copy of this License.

I. Preserve the section Entitled "History", Preserve its Title, and add to it
an item stating at least the title, year, new authors, and publisher of the
Modified Version as given on the Title Page. If there is no section Entitled
"History" in the Document, create one stating the title, year, authors, and
publisher of the Document as given on its Title Page, then add an item
describing the Modified Version as stated in the previous sentence.

J. Preserve the network location, if any, given in the Document for public
access to a Transparent copy of the Document, and likewise the network
locations given in the Document for previous versions it was based on. These
may be placed in the "History" section. You may omit a network location for a
work that was published at least four years before the Document itself, or if
the original publisher of the version it refers to gives permission.

K. For any section Entitled "Acknowledgements" or "Dedications", Preserve the
Title of the section, and preserve in the section all the substance and tone of
each of the contributor acknowledgements and/or dedications given therein.

L. Preserve all the Invariant Sections of the Document, unaltered in their text
and in their titles. Section numbers or the equivalent are not considered part
of the section titles.

M. Delete any section Entitled "Endorsements". Such a section may not be
included in the Modified Version.

N. Do not retitle any existing section to be Entitled "Endorsements" or to
conflict in title with any Invariant Section.

O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or appendices that
qualify as Secondary Sections and contain no material copied from the Document,
you may at your option designate some or all of these sections as invariant. To
do this, add their titles to the list of Invariant Sections in the Modified
Version's license notice. These titles must be distinct from any other section
titles.

You may add a section Entitled "Endorsements", provided it contains nothing but
endorsements of your Modified Version by various parties—for example,
statements of peer review or that the text has been approved by an organization
as the authoritative definition of a standard.

You may add a passage of up to five words as a Front-Cover Text, and a passage
of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts
in the Modified Version. Only one passage of Front-Cover Text and one of
Back-Cover Text may be added by (or through arrangements made by) any one
entity. If the Document already includes a cover text for the same cover,
previously added by you or by arrangement made by the same entity you are
acting on behalf of, you may not add another; but you may replace the old one,
on explicit permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License give
permission to use their names for publicity for or to assert or imply
endorsement of any Modified Version.

=== 5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this License,
under the terms defined in section 4 above for modified versions, provided that
you include in the combination all of the Invariant Sections of all of the
original documents, unmodified, and list them all as Invariant Sections of your
combined work in its license notice, and that you preserve all their Warranty
Disclaimers.

The combined work need only contain one copy of this License, and multiple
identical Invariant Sections may be replaced with a single copy. If there are
multiple Invariant Sections with the same name but different contents, make the
title of each such section unique by adding at the end of it, in parentheses,
the name of the original author or publisher of that section if known, or else
a unique number. Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History" in the
various original documents, forming one section Entitled "History"; likewise
combine any sections Entitled "Acknowledgements", and any sections Entitled
"Dedications". You must delete all sections Entitled "Endorsements".

=== 6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this License
in the various documents with a single copy that is included in the collection,
provided that you follow the rules of this License for verbatim copying of each
of the documents in all other respects.

You may extract a single document from such a collection, and distribute it
individually under this License, provided you insert a copy of this License
into the extracted document, and follow this License in all other respects
regarding verbatim copying of that document.

=== 7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate and
independent documents or works, in or on a volume of a storage or distribution
medium, is called an "aggregate" if the copyright resulting from the
compilation is not used to limit the legal rights of the compilation's users
beyond what the individual works permit. When the Document is included in an
aggregate, this License does not apply to the other works in the aggregate
which are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these copies of the
Document, then if the Document is less than one half of the entire aggregate,
the Document's Cover Texts may be placed on covers that bracket the Document
within the aggregate, or the electronic equivalent of covers if the Document is
in electronic form. Otherwise they must appear on printed covers that bracket
the whole aggregate.

=== 8. TRANSLATION

Translation is considered a kind of modification, so you may distribute
translations of the Document under the terms of section 4. Replacing Invariant
Sections with translations requires special permission from their copyright
holders, but you may include translations of some or all Invariant Sections in
addition to the original versions of these Invariant Sections. You may include
a translation of this License, and all the license notices in the Document, and
any Warranty Disclaimers, provided that you also include the original English
version of this License and the original versions of those notices and
disclaimers. In case of a disagreement between the translation and the original
version of this License or a notice or disclaimer, the original version will
prevail.

If a section in the Document is Entitled "Acknowledgements", "Dedications", or
"History", the requirement (section 4) to Preserve its Title (section 1) will
typically require changing the actual title.

=== 9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except as
expressly provided under this License. Any attempt otherwise to copy, modify,
sublicense, or distribute it is void, and will automatically terminate your
rights under this License.

However, if you cease all violation of this License, then your license from a
particular copyright holder is reinstated (a) provisionally, unless and until
the copyright holder explicitly and finally terminates your license, and (b)
permanently, if the copyright holder fails to notify you of the violation by
some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated
permanently if the copyright holder notifies you of the violation by some
reasonable means, this is the first time you have received notice of violation
of this License (for any work) from that copyright holder, and you cure the
violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses
of parties who have received copies or rights from you under this License. If
your rights have been terminated and not permanently reinstated, receipt of a
copy of some or all of the same material does not give you any rights to use it.

=== 10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the GNU Free
Documentation License from time to time. Such new versions will be similar in
spirit to the present version, but may differ in detail to address new problems
or concerns. See http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number. If the
Document specifies that a particular numbered version of this License "or any
later version" applies to it, you have the option of following the terms and
conditions either of that specified version or of any later version that has
been published (not as a draft) by the Free Software Foundation. If the
Document does not specify a version number of this License, you may choose any
version ever published (not as a draft) by the Free Software Foundation. If the
Document specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a version
permanently authorizes you to choose that version for the Document.

=== 11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any World Wide
Web server that publishes copyrightable works and also provides prominent
facilities for anybody to edit those works. A public wiki that anybody can edit
is an example of such a server. A "Massive Multiauthor Collaboration" (or
"MMC") contained in the site means any set of copyrightable works thus
published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 license
published by Creative Commons Corporation, a not-for-profit corporation with a
principal place of business in San Francisco, California, as well as future
copyleft versions of that license published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in part, as
part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this License, and
if all works that were first published under this License somewhere other than
this MMC, and subsequently incorporated in whole or in part into the MMC, (1)
had no cover texts or invariant sections, and (2) were thus incorporated prior
to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site under
CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC
is eligible for relicensing.

